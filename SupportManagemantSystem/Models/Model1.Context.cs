//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SupportManagemantSystem.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SupportManagemantSystemEntities : DbContext
    {
        public SupportManagemantSystemEntities()
            : base("name=SupportManagemantSystemEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<CompanyProject> CompanyProjects { get; set; }
        public virtual DbSet<CompanyUser> CompanyUsers { get; set; }
        public virtual DbSet<Doing> Doings { get; set; }
        public virtual DbSet<Duty> Duties { get; set; }
        public virtual DbSet<Error> Errors { get; set; }
        public virtual DbSet<Execute> Executes { get; set; }
        public virtual DbSet<EXEFile> EXEFiles { get; set; }
        public virtual DbSet<Message> Messages { get; set; }
        public virtual DbSet<MessageReciever> MessageRecievers { get; set; }
        public virtual DbSet<Piority> Piorities { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<Query> Queries { get; set; }
        public virtual DbSet<QueryType> QueryTypes { get; set; }
        public virtual DbSet<Request> Requests { get; set; }
        public virtual DbSet<Response> Responses { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Task> Tasks { get; set; }
        public virtual DbSet<Ticket> Tickets { get; set; }
        public virtual DbSet<TicketFile> TicketFiles { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserGroup> UserGroups { get; set; }
        public virtual DbSet<UserProject> UserProjects { get; set; }
    
        public virtual int pep()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pep");
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> GetLastExecute(Nullable<int> companyID, Nullable<int> projectID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("projectID", projectID) :
                new ObjectParameter("projectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("GetLastExecute", companyIDParameter, projectIDParameter);
        }
    }
}
